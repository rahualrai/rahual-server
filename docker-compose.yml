---
networks:
  web-network:
    driver: bridge
  monitoring-network:
    driver: bridge
  immich-network:
    driver: bridge
  app-network:
    driver: bridge
  mealie-network:
    driver: bridge

services:

  web:
    image: caddy:latest
    container_name: web
    restart: unless-stopped
    ports:
      - "3000:80"
    volumes:
      - ./site/dist:/usr/share/caddy
      - ./Caddyfile:/etc/caddy/Caddyfile
    networks:
      - web-network

  vaultwarden:
    image: vaultwarden/server:latest
    container_name: vaultwarden
    restart: always
    volumes:
      - ./vaultwarden-data:/data
    ports:
      - "3010:80"
    environment:
      - ADMIN_TOKEN=${VAULTWARDEN_ADMIN_TOKEN}
      - DOMAIN=https://vault.rahual.com
      - WEBSOCKET_ENABLED=true
      - SIGNUPS_ALLOWED=false
      - SHOW_PASSWORD_HINTS=false
      - LOG_LEVEL=warn
      - EXTENDED_LOGGING=true
      - TZ=America/New_York
    networks:
      - app-network

  portainer:
    image: portainer/portainer-ce:latest
    container_name: portainer
    restart: always
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
      - ./portainer-data:/data
    ports:
      - "9000:9000"
    environment:
      - ADMIN_PASSWORD=${PORTAINER_ADMIN_PASSWORD_BCRYPT}
    networks:
      - monitoring-network

  watchtower:
    image: containrrr/watchtower
    container_name: watchtower
    restart: always
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
    command: --cleanup --schedule "0 0 * * *"
    networks:
      - monitoring-network

  uptime-kuma:
    image: louislam/uptime-kuma:1
    container_name: uptime-kuma
    restart: unless-stopped
    ports:
      - "3020:3001"
    volumes:
      - ./uptime-kuma-data:/app/data
    environment:
      - TZ=America/New_York
    networks:
      - monitoring-network

  filebrowser:
    image: filebrowser/filebrowser:latest
    container_name: filebrowser
    volumes:
      - ./files:/srv
      - ./filebrowser-db:/database
      - ./filebrowser-config:/config
    ports:
      - 8082:80
    restart: unless-stopped
    env_file:
      - .env
    environment:
      - FB_ADMIN_USER=${FB_ADMIN_USER}
      - FB_ADMIN_PASSWORD=${FB_ADMIN_PASSWORD}
    networks:
      - app-network

  grafana:
    image: grafana/grafana:latest
    container_name: grafana
    restart: unless-stopped
    ports:
      - "3001:3000"
    volumes:
      - ./grafana:/var/lib/grafana
    env_file:
      - .env
    networks:
      - monitoring-network

  prometheus:
    image: prom/prometheus:latest
    container_name: prometheus
    volumes:
      - ./prometheus.yml:/etc/prometheus/prometheus.yml
    ports:
      - "9090:9090"
    restart: unless-stopped
    networks:
      - monitoring-network

  cadvisor:
    image: gcr.io/cadvisor/cadvisor:latest
    container_name: cadvisor
    ports:
      - "8085:8080"
    volumes:
      - /:/rootfs:ro
      - /var/run:/var/run:ro
      - /sys:/sys:ro
      - /var/lib/docker/:/var/lib/docker:ro
    devices:
      - /dev/kmsg
    restart: unless-stopped
    networks:
      - monitoring-network

  node-exporter:
    image: prom/node-exporter:latest
    container_name: node-exporter
    command:
      - --path.rootfs=/host
      - --collector.filesystem.ignored-mount-points=^/(sys|proc|dev|host|etc)($$|/)
    volumes:
      - /:/host:ro,rslave
    ports:
      - "9100:9100"
    restart: unless-stopped
    networks:
      - monitoring-network

  immich-server:
    container_name: immich_server
    image: ghcr.io/immich-app/immich-server:${IMMICH_VERSION:-release}
    volumes:
      - ${UPLOAD_LOCATION}:/usr/src/app/upload
      - /etc/localtime:/etc/localtime:ro
    env_file:
      - .env
    ports:
      - '2283:2283'
    depends_on:
      - redis
      - database
    restart: always
    healthcheck:
      disable: false
    networks:
      - immich-network

  immich-machine-learning:
    container_name: immich_machine_learning
    image: ghcr.io/immich-app/immich-machine-learning:${IMMICH_VERSION:-release}
    volumes:
      - model-cache:/cache
    env_file:
      - .env
    restart: always
    healthcheck:
      disable: false
    networks:
      - immich-network

  redis:
    container_name: immich_redis
    image: redis:7-alpine
    healthcheck:
      test: redis-cli ping || exit 1
    restart: always
    networks:
      - immich-network

  database:
    container_name: immich_postgres
    image: ghcr.io/immich-app/postgres:14-vectorchord0.4.3-pgvectors0.2.0
    environment:
      POSTGRES_PASSWORD: ${DB_PASSWORD}
      POSTGRES_USER: ${DB_USERNAME}
      POSTGRES_DB: ${DB_DATABASE_NAME}
      POSTGRES_INITDB_ARGS: '--data-checksums'
    volumes:
      - ${DB_DATA_LOCATION}:/var/lib/postgresql/data
    restart: always
    networks:
      - immich-network

  n8n:
    image: n8nio/n8n:1.48.0
    container_name: n8n
    restart: unless-stopped
    ports:
      - "5678:5678"
    environment:
      - N8N_BASIC_AUTH_ACTIVE=true
      - N8N_BASIC_AUTH_PASSWORD=${N8N_PASSWORD}
      - N8N_BASIC_AUTH_USER=rahual
      - TZ=America/New_York
      - WEBHOOK_TUNNEL_URL=https://n8n.rahual.com
      - N8N_HOST=n8n.rahual.com
      - N8N_PORT=5678
      - N8N_PROXY_HOPS=1
    volumes:
      - ./n8n-data:/home/node/.n8n
    networks:
      - app-network

  mealie:
    image: ghcr.io/mealie-recipes/mealie:v3.0.1
    container_name: mealie
    restart: always
    ports:
      - "9925:9000"
    deploy:
      resources:
        limits:
          memory: 1000M
    volumes:
      - mealie-data:/app/data/
    environment:
      ALLOW_SIGNUP: "false"
      PUID: 1000
      PGID: 1000
      TZ: America/New_York
      BASE_URL: https://meal.rahual.com
      DB_ENGINE: postgres
      POSTGRES_USER: ${MEALIE_DB_USER}
      POSTGRES_PASSWORD: ${MEALIE_DB_PASSWORD}
      POSTGRES_SERVER: mealie-postgres
      POSTGRES_PORT: 5432
      POSTGRES_DB: ${MEALIE_DB_NAME}
    depends_on:
      mealie-postgres:
        condition: service_healthy
    networks:
      - mealie-network

  mealie-postgres:
    container_name: mealie-postgres
    image: postgres:15
    restart: always
    volumes:
      - mealie-pgdata:/var/lib/postgresql/data
    environment:
      POSTGRES_PASSWORD: ${MEALIE_DB_PASSWORD}
      POSTGRES_USER: ${MEALIE_DB_USER}
      POSTGRES_DB: ${MEALIE_DB_NAME}
      PGUSER: ${MEALIE_DB_USER}
    healthcheck:
      test: ["CMD", "pg_isready"]
      interval: 30s
      timeout: 20s
      retries: 3
    networks:
      - mealie-network


volumes:
  model-cache:
  mealie-data:
  mealie-pgdata:
  postgres_data:
